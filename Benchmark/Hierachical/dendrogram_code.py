# -*- coding: utf-8 -*-
"""Dendrogram_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Dtq-IoOZIEHE0UIMfAYR89BUvMLnKxr
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from sklearn import cluster
from scipy.cluster.hierarchy import dendrogram
import matplotlib.pyplot as plt
# %matplotlib inline
from google.colab import files
import io



#define dendrogram
def plot_dendrogram(model, **kwargs):
    # Create linkage matrix and then plot the dendrogram
  
    # create the counts of samples under each node
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # leaf node
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack([model.children_, model.distances_,
                                      counts]).astype(float)

    # Plot the corresponding dendrogram
    dendrogram(linkage_matrix, **kwargs)

#drop unnesessary columns
data = nba.drop(['Position', 'Team', 'Player'],axis =1 )    

#List of algorithms
clustering_algorithms = (
    ('Single Linkage', 'single'),
    ('Average Linkage', 'average'),
    ('Complete Linkage', 'complete'),
    ('Ward Linkage', 'ward'),
)  

#distance metrics
affinity_metrics = ['cosine', 'euclidean', 'manhattan']

#apply the algorithm 
for metric in affinity_metrics: 
    for alg_name, alg in clustering_algorithms:
        if alg == 'ward' and metric != 'euclidean': continue
        model = cluster.AgglomerativeClustering(linkage=alg, affinity=metric, distance_threshold=0, n_clusters=None)
    
        model.fit(frame)
        plt.title('Hierarchical Clustering Dendrogram: ' + alg_name + ", " + metric)
        # plot the top five levels of the dendrogram
        plot_dendrogram(model, truncate_mode='level', p=3, labels=names.tolist(), orientation='right')
        plt.xlabel("Number of points in node (or index of point if no parenthesis).")
        plt.show()