# -*- coding: utf-8 -*-
"""gini_entropy_purity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SrCPgi636BcuEuQsBLaKIAzIDwlittsS

#External Cluster Evaluation

#Gini Index
"""

#https://towardsdatascience.com/clustering-for-data-nerds-ebbfb7ed4090

# calculate the Gini coefficient for each cluster
def get_gini_coefs(df_clustered, label_col_name='User', cluster_col_name='Cluster14', cluster_values=range(1,15,1)):
    p_squared = [[round(df_clustered[(df_clustered[label_col_name]==label) & (df_clustered[cluster_col_name]==cluster)].shape[0]/
                df_clustered[df_clustered[cluster_col_name]==cluster].shape[0],3)**2 for label in cluster_values] for cluster in cluster_values]
    g = [round(1-sum(p_i_squared), 3) for p_i_squared in p_squared]
    return g, p_squared


  
gini_coefs_5, p_squared_5 = get_gini_coefs(df_postures_clustered_5, label_col_name='Class', cluster_col_name='Cluster5', cluster_values=range(1,6,1))
print("Clusters' Gini Coefs")
print(gini_coefs_5)
print("Average Gini Coef: {0:.3f}".format(sum(gini_coefs_5)/len(gini_coefs_5)))

p_squared_5[1], p_squared_5[3]

"""#Entropy-based cluster evaluation """

#https://towardsdatascience.com/clustering-for-data-nerds-ebbfb7ed4090

def get_entropys(df_clustered, label_col_name='User', cluster_col_name='Cluster14', cluster_values=range(1,15,1)):
    p = [[round(df_clustered[(df_clustered[label_col_name]==label) & (df_clustered[cluster_col_name]==cluster)].shape[0]/
                df_clustered[df_clustered[cluster_col_name]==cluster].shape[0],3) for label in cluster_values] for cluster in cluster_values]
    p_log_p = [[p_i*math.log(p_i) for p_i in p_i_s if p_i!=0] for p_i_s in p]
    e = [-round(sum(p_log_p_i),3) for p_log_p_i in p_log_p]
    return e
  
entropys_5 = get_entropys(df_postures_clustered_5, label_col_name='Class', cluster_col_name='Cluster5', cluster_values=range(1,6,1))
print("Clusters' Entropy")
print(entropys_5)
print("Average Entropy: {0:.3f}".format(sum(entropys_5)/len(entropys_5)))

"""Purity of a cluster

Resource: 1) https://stats.stackexchange.com/questions/95731/how-to-calculate-purity/154379#154379

2) https://stackoverflow.com/questions/34047540/python-clustering-purity-metric
"""

import numpy as np
from sklearn import metrics

def purity_score(y_true, y_pred):
    # compute contingency matrix (also called confusion matrix)
    contingency_matrix = metrics.cluster.contingency_matrix(y_true, y_pred)
    # return purity
    return np.sum(np.amax(contingency_matrix, axis=0)) / np.sum(contingency_matrix)
    #Also if you need to compute Inverse Purity, all you need to do is replace "axis=0" by "axis=1".



